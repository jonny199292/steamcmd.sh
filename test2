#!/usr/bin/env bash

# Copyright (c) 2021-2024 tteck
# Author: tteck (tteckster)
# License: MIT
# https://github.com/tteck/Proxmox/raw/main/LICENSE

function header_info {
  clear
  cat <<"EOF"
    ____       __    _                ______
   / __ \___  / /_  (_)___ _____     <  /__ \
  / / / / _ \/ __ \/ / __ `/ __ \    / /__/ /
 / /_/ /  __/ /_/ / / /_/ / / / /   / // __/
/_____/\___/_.___/_/\__,_/_/ /_/   /_//____/

EOF
}

header_info
echo -e "\n Loading..."
NEXTID=$(pvesh get /cluster/nextid)

YW=$(echo "\033[33m")
BL=$(echo "\033[36m")
RD=$(echo "\033[01;31m")
BGN=$(echo "\033[4;92m")
GN=$(echo "\033[1;92m")
DGN=$(echo "\033[32m")
CL=$(echo "\033[m")
BFR="\\r\\033[K"
HOLD="-"
CM="${GN}✓${CL}"
CROSS="${RD}✗${CL}"
set -e
trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
trap cleanup EXIT
function error_handler() {
  local exit_code="$?"
  local line_number="$1"
  local command="$2"
  local error_message="${RD}[ERROR]${CL} in line ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: while executing command ${YW}$command${CL}"
  echo -e "\n$error_message\n"
  cleanup_ctid
}

function cleanup_ctid() {
  if pct status $CTID &>/dev/null; then
    pct stop $CTID &>/dev/null
    pct destroy $CTID &>/dev/null
  fi
}

function cleanup() {
  rm -rf $TEMP_DIR
}

TEMP_DIR=$(mktemp -d)

if whiptail --backtitle "Proxmox VE Helper Scripts" --title "Debian 12 LXC Container" --yesno "This will create a New Debian 12 LXC Container. Proceed?" 10 58; then
  :
else
  header_info && echo -e "⚠ User exited script \n" && exit
fi

function msg_info() {
  local msg="$1"
  echo -ne " ${HOLD} ${YW}${msg}..."
}

function msg_ok() {
  local msg="$1"
  echo -e "${BFR} ${CM} ${GN}${msg}${CL}"
}

function msg_error() {
  local msg="$1"
  echo -e "${BFR} ${CROSS} ${RD}${msg}${CL}"
}

function check_root() {
  if [[ "$(id -u)" -ne 0 || $(ps -o comm= -p $PPID) == "sudo" ]]; then
    clear
    msg_error "Please run this script as root."
    echo -e "\nExiting..."
    sleep 2
    exit
  fi
}

function pve_check() {
  if ! pveversion | grep -Eq "pve-manager/(7.4-[1][3-9]|8.1.[1-9])"; then
    msg_error "This version of Proxmox Virtual Environment is not supported"
    echo -e "Requires PVE7 Version 7.4-13 or later, or PVE8 Version 8.1.1 or later."
    echo -e "Exiting..."
    sleep 2
    exit
  fi
}

function arch_check() {
  if [ "$(dpkg --print-architecture)" != "amd64" ]; then
    msg_error "This script will not work with PiMox! \n"
    echo -e "Exiting..."
    sleep 2
    exit
  fi
}

function exit-script() {
  clear
  echo -e "⚠  User exited script \n"
  exit
}

function default_settings() {
  CTID="$NEXTID"
  HN="debian"
  CPU_CORES="1"
  MEMORY="512"
  echo -e "${DGN}Using Container ID: ${BGN}${CTID}${CL}"
  echo -e "${DGN}Using Hostname: ${BGN}${HN}${CL}"
  echo -e "${DGN}Using CPU Cores: ${BGN}${CPU_CORES}${CL}"
  echo -e "${DGN}Using Memory: ${BGN}${MEMORY} MB${CL}"
  echo -e "${BL}Creating a Debian 12 LXC Container using the above default settings${CL}"
}

function start_script() {
  if (whiptail --backtitle "Proxmox VE Helper Scripts" --title "SETTINGS" --yesno "Use Default Settings?" --no-button Advanced 10 58); then
    header_info
    echo -e "${BL}Using Default Settings${CL}"
    default_settings
  else
    header_info
    echo -e "${RD}Using Advanced Settings${CL}"
    # Implement advanced settings if needed
    exit
  fi
}

check_root
arch_check
pve_check
start_script

msg_info "Creating a Debian 12 LXC Container"
pct create $CTID -hostname $HN -ostype debian -cores $CPU_CORES -memory $MEMORY -storage local-lvm -password rootpassword
msg_ok "Created a Debian 12 LXC Container ${CL}${BL}(${HN})"

msg_info "Starting Debian 12 LXC Container"
pct start $CTID
msg_ok "Started Debian 12 LXC Container"

msg_ok "Completed Successfully!\n"
